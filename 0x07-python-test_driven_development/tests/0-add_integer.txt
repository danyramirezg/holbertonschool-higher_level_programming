0. Integers addition module
===========================
Function
========.
function that adds 2 integers.

Operations
==========
a and b must be integers or floats, otherwise raise a TypeError exception
with the message a must be an integer or b must be an integer:

Import module:
    >>> add_integer = __import__('0-add_integer').add_integer

Uses:

Should return an error when cannot convert float NaN to integer:

    >>> add_integer(float(NaN))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer


Should return the sum of two integers:
    >>> add_integer(7, 5)
    12

Should return an integer from the sum of a = float, b = integer:
    >>> add_integer(5.0, 3)
    8

Should return an integer from the sum of a = integer, b = float:
    >>> add_integer(5, 3.0)
    8

Should return an error:
    >>> add_integer(None, 3)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return an error:
    >>> add_integer(3, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Should return an error:
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Should return the sum of two negative integers:
    >>> add_integer(-7, -2)
    -9

Should return error if a = string:
    >>> add_integer("hello", -2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return error if b = string:
    >>> add_integer(2, "h")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Should return error if a = None:
    >>> add_integer(None, 2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return error if b = None:
    >>> add_integer(2, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Should return an error if a = None and b = None:
    >>> add_integer(None, None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return an error if an infinity float is passed:
    >>> add_integer(5, float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Should return an error if a list is passed:
    >>> add_integer([5, 8, 7], 3)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return an error if a list is passed:
    >>> add_integer(3, [5, 8, 7])
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Should return an integer:
    >>> add_integer(3)
    101

Should return an int:
     >>> type(add_integer(7, 3))
     <class 'int'>

















